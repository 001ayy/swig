{
  "tags": {
    "extends": {
      "desc": "Makes the current template extend a parent template. This tag must be the first item in your template.",
      "args": {
        "file": {
          "types": ["string", "var"],
          "desc": "The path, relative to the template root, to use as the parent layout for the current file. Must be the first token of this file."
        }
      },
      "inc": "docs/tags/extends.html"
    },
    "block": {
      "desc": "Defines a block in a template that can be overridden by a template extending this one and/or will override the current template's parent template block of the same name.",
      "args": {
        "name": {
          "types": ["token"],
          "desc": "Name for the current block context. Must start with a letter and only include letters, numbers, and underscores."
        }
      },
      "inc": "docs/tags/block.html"
    },
    "parent": {
      "desc": "Inject the content from the parent template's block of the same name into the current block.",
      "inc": "docs/tags/parent.html"
    },
    "include": {
      "desc": "Includes a template in it's place. The template is rendered within the current context.",
      "args": {
        "file": {
          "types": ["string", "var"],
          "desc": "The path, relative to the template root, to render into the current context."
        },
        "ignore missing": {
          "types": [],
          "desc": "Do not error if the file does not exist.",
          "optional": true
        },
        "with <var>x</var>": {
          "types": ["var"],
          "desc": "Set <var>x</var> to the root context object to pass to the rendering of the template. This should always be a key:value object.",
          "optional": true
        },
        "only": {
          "types": [],
          "desc": "Restrict the context of the template to those explicitly defined the the <var>with x</var> argument",
          "optional": true
        }
      },
      "inc": "docs/tags/include.html"
    },
    "raw": {
      "desc": "Stop token parsing within this tag. All content will be output as-is.",
      "inc": "docs/tags/raw.html"
    },
    "for": {
      "desc": "Loop over objects and arrays.",
      "args": {
        "x": {
          "types": ["token"],
          "desc": "Loop-accessible name for the current loop iteration's value."
        },
        "in": {},
        "y": {
          "types": ["var"],
          "desc": "Iterable object. Can be modified with filters as desired."
        }
      },
      "inc": "docs/tags/for.html"
    },
    "if": {
      "desc": "Conditional statements",
      "args": {
        "...": {
          "types": ["mixed"],
          "desc": "Accepts any valid JavaScript conditional statement, as well as some other human readable syntaxes."
        }
      },
      "inc": "docs/tags/if.html"
    },
    "autoescape": {
      "desc": "Change the current behavior of variable auto-escaping.",
      "args": {
        "on": {
          "types": ["token"],
          "desc": "Whether the content should be escaped (<samp>true</samp>) or not (<samp>false</samp>)."
        },
        "type": {
          "types": ["string"],
          "desc": "Escape type. One of <samp>html</samp> or <samp>js</samp>.",
          "default": "html",
          "optional": true
        }
      },
      "inc": "docs/tags/autoescape.html"
    },
    "set": {
      "desc": "Set a variable for re-use in the current context.",
      "args": {
        "name": {
          "types": ["token"],
          "desc": "Variable name to assign the value to."
        },
        "=": {},
        "value": {
          "types": ["mixed"],
          "desc": "Value to apply to <var>name</var>."
        }
      },
      "inc": "docs/tags/set.html"
    },
    "macro": {
      "desc": "Create custom, reusable snippets within your templates.",
      "args": {
        "...": {
          "types": ["token"],
          "desc": "User defined."
        }
      },
      "inc": "docs/tags/macro.html"
    },
    "import": {
      "desc": "Allows you to import macros from another file directly into your current context.",
      "args": {
        "file": {
          "types": ["var", "string"],
          "desc": "The path, relative to the template root, to import macros from."
        },
        "as": {},
        "var": {
          "types": ["token"],
          "desc": "Context-accessible object name to assign the macros to."
        }
      },
      "inc": "docs/tags/import.html"
    },
    "filter": {
      "desc": "Apply a filter to an entire block of template.",
      "args": {
        "filter_name": {
          "types": ["token"],
          "desc": "Name of the filter to use."
        },
        "...": {
          "types": ["mixed"],
          "desc": "Accepts any number of arguments, will be passed to the filter."
        }
      },
      "inc": "docs/tags/filter.html"
    }
  }
}
